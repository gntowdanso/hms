// Prisma schema for Hospital Management System
// Database: PostgreSQL

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_HMS")
}

//
// ENUMS
//
enum AdmissionStatus {
  OUTPATIENT
  INPATIENT
  DISCHARGED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NOSHOW
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  UNDERMAINTENANCE
}

enum PaymentMethod {
  CASH
  BANK
  INSURANCE
  MOBILEMONEY
}

enum BillingStatus {
  PAID
  UNPAID
  PARTIAL
}

enum TransactionType {
  ISSUED
  RETURNED
  STOCKED
}

//
// üè• CORE ENTITIES
//
model Hospital {
  id              Int      @id @default(autoincrement())
  username        String
  name            String
  address         String
  contactInfo     String
  licenseNumber   String
  establishedDate DateTime
  type            String

  Department Department[]
  Patient    Patient[]
}

model Department {
  id           Int           @id @default(autoincrement())
  username     String
  name         String
  description  String?
  hospitalId   Int
  hospital     Hospital      @relation(fields: [hospitalId], references: [id])
  doctors      Doctor[]
  nurses       Nurse[]
  staff        Staff[]
  wards        Ward[]
  appointments Appointment[]
  labTests     LabTest[]
}

model Ward {
  id           Int         @id @default(autoincrement())
  username     String
  name         String
  capacity     Int
  departmentId Int
  department   Department  @relation(fields: [departmentId], references: [id])
  rooms        Room[]
  nurses       Nurse[]
  admissions   Admission[]
}

model Room {
  id         Int         @id @default(autoincrement())
  username   String
  wardId     Int
  ward       Ward        @relation(fields: [wardId], references: [id])
  admissions Admission[]
  roomNumber String
  bedNumber  String
  status     BedStatus
}

//
// üë©‚Äç‚öïÔ∏è PEOPLE ENTITIES
//
model Patient {
  id               Int                   @id @default(autoincrement())
  username         String
  hospitalNo       String                @unique
  firstName        String
  lastName         String
  gender           String
  dob              DateTime
  address          String
  contactInfo      String
  emergencyContact String
  admissionStatus  AdmissionStatus
  bloodGroup       String?
  hospitalId       Int
  hospital         Hospital              @relation(fields: [hospitalId], references: [id])
  appointments     Appointment[]
  admissions       Admission[]
  diagnoses        Diagnosis[]
  prescriptions    Prescription[]
  labRequests      LabRequest[]
  treatments       Treatment[]
  medicalRecords   MedicalRecord[]
  pharmacyTxns     PharmacyTransaction[]
  billingRecords   Billing[]
  insurance        Insurance?
  // Service ordering relations
  serviceOrders        ServiceOrder[]
  serviceOrderPayments ServiceOrderPayment[]
}

model Doctor {
  id             Int             @id @default(autoincrement())
  username       String
  staffNo        String
  firstName      String
  lastName       String
  specialty      String
  qualification  String
  departmentId   Int
  department     Department      @relation(fields: [departmentId], references: [id])
  contactInfo    String
  email          String
  employmentDate DateTime
  licenseNumber  String
  appointments   Appointment[]
  diagnoses      Diagnosis[]
  prescriptions  Prescription[]
  admissions     Admission[]
  treatments     Treatment[]
  medicalRecords MedicalRecord[]
  labRequests    LabRequest[]
}

model Nurse {
  id             Int        @id @default(autoincrement())
  username       String
  staffNo        String
  firstName      String
  lastName       String
  qualification  String
  departmentId   Int
  wardId         Int
  department     Department @relation(fields: [departmentId], references: [id])
  ward           Ward       @relation(fields: [wardId], references: [id])
  contactInfo    String
  employmentDate DateTime
}

model Staff {
  id             Int        @id @default(autoincrement())
  username       String
  staffNo        String
  firstName      String
  lastName       String
  role           String
  departmentId   Int
  department     Department @relation(fields: [departmentId], references: [id])
  contactInfo    String
  email          String
  employmentDate DateTime
}

model UserAccount {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String
  role         String // (Patient, Doctor, Nurse, Staff, Admin)
  lastLogin    DateTime?
  isActive     Boolean   @default(true)
  // Reports authored by this user
  serviceTestReports ServiceTestReport[]
}

//
// üìã MEDICAL RECORDS
//
model Appointment {
  id              Int               @id @default(autoincrement())
  username        String
  patientId       Int
  doctorId        Int
  departmentId    Int
  appointmentDate DateTime
  reason          String
  status          AppointmentStatus
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  department      Department        @relation(fields: [departmentId], references: [id])
  // Service orders linked to this appointment (if any)
  serviceOrders   ServiceOrder[]
}

model Admission {
  id            Int       @id @default(autoincrement())
  username      String
  patientId     Int
  doctorId      Int
  wardId        Int
  roomId        Int
  admissionDate DateTime
  dischargeDate DateTime?
  status        String
  patient       Patient   @relation(fields: [patientId], references: [id])
  doctor        Doctor    @relation(fields: [doctorId], references: [id])
  ward          Ward      @relation(fields: [wardId], references: [id])
  room          Room      @relation(fields: [roomId], references: [id])
  billing       Billing?
}

model Diagnosis {
  id        Int      @id @default(autoincrement())
  username  String
  patientId Int
  doctorId  Int
  date      DateTime
  condition String
  notes     String?
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
}

model Prescription {
  id        Int                  @id @default(autoincrement())
  username  String
  patientId Int
  doctorId  Int
  date      DateTime
  notes     String?
  patient   Patient              @relation(fields: [patientId], references: [id])
  doctor    Doctor               @relation(fields: [doctorId], references: [id])
  details   PrescriptionDetail[]
}

model PrescriptionDetail {
  id             Int          @id @default(autoincrement())
  username       String
  prescriptionId Int
  medicineId     Int
  dosage         String
  frequency      String
  duration       String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicine       Medicine     @relation(fields: [medicineId], references: [id])
}

model LabType {
  id        Int       @id @default(autoincrement())
  name      String
  labTests  LabTest[]
}

model LabTest {
  id           Int          @id @default(autoincrement())
  username     String
  labTypeId    Int
  labtype      LabType @relation(fields:[labTypeId],references:[id])
  testName     String
  description  String?
  departmentId Int
  department   Department   @relation(fields: [departmentId], references: [id])
  cost         Float
  requests     LabRequest[]
}

model LabRequest {
  id          Int        @id @default(autoincrement())
  username    String
  patientId   Int
  doctorId    Int
  testId      Int
  requestDate DateTime
  status      String
  patient     Patient    @relation(fields: [patientId], references: [id])
  doctor      Doctor     @relation(fields: [doctorId], references: [id])
  test        LabTest    @relation(fields: [testId], references: [id])
  result      LabResult?
  imageBase64 String?   // base64 of the lab request image (optional)
  imageURL    String?   // URL to the lab request image (optional)
  details     LabResultDetails[]
}

model LabResult {
  id            Int        @id @default(autoincrement())
  username      String
  labRequestId  Int        @unique
  resultDetails String
  resultDate    DateTime
  verifiedBy    Int
  labRequest    LabRequest @relation(fields: [labRequestId], references: [id])
  imageBase64   String?   // base64 of the lab result image (optional)
  imageURL      String?   // URL to the lab result image (optional)
  details      LabResultDetails[]
}

model LabResultDetails {
  id             Int        @id @default(autoincrement())
  username       String
  labRequestId   Int
  labResultId    Int
  code           String
  result         String
  referenceRange String?
  flag           String?
  rating         String?
  unit           String?

  labRequest     LabRequest @relation(fields: [labRequestId], references: [id])
  labResult      LabResult  @relation(fields: [labResultId], references: [id])
}


model Treatment {
  id            Int      @id @default(autoincrement())
  username      String
  patientId     Int
  doctorId      Int
  treatmentName String
  treatmentDate DateTime
  notes         String?
  outcome       String?
  patient       Patient  @relation(fields: [patientId], references: [id])
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
}

model MedicalRecord {
  id              Int      @id @default(autoincrement())
  username        String
  doctorId        Int
  patientId       Int
  recordDate      DateTime
  diagnosis       String
  treatmentsGiven String?
  allergies       String?
  notes           String?
  patient         Patient  @relation(fields: [patientId], references: [id])
  doctor          Doctor   @relation(fields: [doctorId], references: [id])
}

//
// üíä PHARMACY & INVENTORY
//
model Medicine {
  id                  Int                   @id @default(autoincrement())
  username            String
  name                String
  genericName         String
  category            String
  manufacturer        String
  quantityAvailable   Int
  expiryDate          DateTime
  unitPrice           Float
  prescriptionDetails PrescriptionDetail[]
  pharmacyTxns        PharmacyTransaction[]
}

model PharmacyTransaction {
  id              Int             @id @default(autoincrement())
  username        String
  medicineId      Int
  patientId       Int
  quantity        Int
  transactionDate DateTime
  type            TransactionType
  medicine        Medicine        @relation(fields: [medicineId], references: [id])
  patient         Patient         @relation(fields: [patientId], references: [id])
}

model InventoryItem {
  id         Int      @id @default(autoincrement())
  username   String
  name       String
  category   String
  quantity   Int
  unitCost   Float
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model Supplier {
  id          Int             @id @default(autoincrement())
  username    String
  name        String
  contactInfo String
  email       String
  address     String
  inventory   InventoryItem[]
}

//
// üí∞ FINANCE & BILLING
//

model FeesAndCharges {
  id            Int       @id @default(autoincrement())
  type          String
  amountPerUnit Float
  unit          String
  billing       Billing[]
}
model Billing {
  id          Int           @id @default(autoincrement())
  username    String
  patientId   Int
  admissionId Int?          @unique
  feesAndChargesId Int
  quantity     Int
  unit          String
  totalAmount Float
  status      BillingStatus
  billingDate DateTime
  patient     Patient       @relation(fields: [patientId], references: [id])
  admission   Admission?    @relation(fields: [admissionId], references: [id])
  feesAndCharges FeesAndCharges @relation(fields: [feesAndChargesId], references: [id])
  invoices    Invoice[]
}

model Invoice {
  id        Int       @id @default(autoincrement())
  username  String
  billingId Int
  issueDate DateTime
  dueDate   DateTime
  amount    Float
  status    String
  billing   Billing   @relation(fields: [billingId], references: [id])
  payments  Payment[]
}

model Payment {
  id          Int           @id @default(autoincrement())
  username    String
  invoiceId   Int
  paymentDate DateTime
  amountPaid  Float
  method      PaymentMethod
  receiptNo   String
  invoice     Invoice       @relation(fields: [invoiceId], references: [id])
}

model Insurance {
  id              Int      @id @default(autoincrement())
  username        String
  patientId       Int      @unique
  providerName    String
  policyNumber    String
  coverageDetails String?
  expiryDate      DateTime
  patient         Patient  @relation(fields: [patientId], references: [id])
}

model Expense {
  id         Int      @id @default(autoincrement())
  username   String
  category   String
  amount     Float
  date       DateTime
  approvedBy String
}

///   
///
///
//
// üß™ Services & Packages
//

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  services     Service[]
}

model SampleType {
  id          Int       @id @default(autoincrement())
  sampleName  String
  services    Service[]
}


model Service {
  id                     Int          @id @default(autoincrement())
  serviceName            String
  description            String?
  price                  Float
  preparationInstructions String?
  turnaroundTime         String?

  // Relations
  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id])

  sampleTypeId Int
  sampleType   SampleType @relation(fields: [sampleTypeId], references: [id])

  serviceOrders ServiceOrder[]
  packages      ServicePackage[] @relation("ServiceInPackages")
}

model ServicePackage {
  id           Int       @id @default(autoincrement())
  packageName  String
  description  String?
  price        Float
  discount     Float?

  // Many-to-Many with Services
  includedTests Service[] @relation("ServiceInPackages")

  serviceOrders ServiceOrder[]
}

//
// üë©‚Äç‚öïÔ∏è Service Orders & Reports
//
model ServiceOrder {
  id             Int       @id @default(autoincrement())
  doctorReferral Boolean   @default(false)
  status         String    @default("Pending")
  createdAt      DateTime  @default(now())

  // Relations
  patientId     Int
  appointmentId Int?
  serviceId     Int?
  packageId     Int?

  patient        Patient        @relation(fields: [patientId], references: [id])
  appointment    Appointment?   @relation(fields: [appointmentId], references: [id])
  service        Service?       @relation(fields: [serviceId], references: [id])
  servicePackage ServicePackage? @relation(fields: [packageId], references: [id])

  report   ServiceTestReport?
  payments ServiceOrderPayment[]
}

model ServiceTestReport {
  id           Int       @id @default(autoincrement())
  filePath     String?
  findings     String?
  reportBase64 String?
  actualResult String?   // Full extracted raw text from uploaded file (AI or parsing)
  resultValues Json?
  comments     String?
  reportDate   DateTime  @default(now())
  // AI augmentation
  aiSummary    String?
  aiProvider   String?
  aiInputHash  String? @unique

  // Relations
  orderId         Int       @unique
  reportedByUserId Int?

  serviceOrder   ServiceOrder  @relation(fields: [orderId], references: [id])
  reportedByUser UserAccount?  @relation(fields: [reportedByUserId], references: [id])
}

// Cached AI summaries to avoid recomputation for identical input
model AISummaryCache {
  id         Int      @id @default(autoincrement())
  inputHash  String   @unique
  provider   String
  summary    String
  createdAt  DateTime @default(now())
}
 
model ServiceOrderPayment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentMethod String
  transactionId String?
  status        String
  paymentDate   DateTime @default(now())

  // Relations
  patientId       Int
  serviceOrderId  Int

  patient      Patient      @relation(fields: [patientId], references: [id])
  serviceOrder ServiceOrder @relation(fields: [serviceOrderId], references: [id])
}